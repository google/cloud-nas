# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SpineNet search config.

# Expected best trial when using TPU-v2 8 cores:
#   mIOU: 0.43
#   FLOPS: 1.94
#   Duration of each trial: 33 mins
train:
  # Train file pattern is provided by the binary flag.

  # Reduce the batch-size if you run into out-of-memory error.
  # Out-of-memory error may also be resolved by reducing
  # the image-size but at the expense of quality.
  train_batch_size: 64

  # Set num-steps to around 5 to 10 epochs for search.
  # Guideline: total_steps = (num-train-examples/train_batch_size)*10.
  # Ideally your individual search-trial should
  # finish within 30 mins to 1 hour.
  total_steps: 10000
  frozen_variable_prefix: null
  learning_rate:
    type: 'cosine'
    warmup_learning_rate: 0.0067
    warmup_steps: 500
    init_learning_rate: 0.2
  gradient_clip_norm: 0.5
  # Backbone is trained from scratch.
  checkpoint:
    path: ''
    prefix: ''

eval:
  # Eval file pattern is provided by the binary flag.

  # NOTE: Eval_samples must be no more than the number of actual validation examples.
  # Otherwise the TPU evaluator will raise an error.
  # Data path: gs://cloud-ml-nas-public/segmentation/pascal/train_aug-000[5-6]?-of-?????
  eval_samples: 2349

  # NOTE: Partial batch will not be used for evaluation. So ideally,
  # the total-number of eval-samples should be divisible by
  # 'eval_batch_size' if you want all the samples to be used.
  # 'eval_batch_size' needs to be divisible by 8 when using TPU.
  eval_batch_size: 8

architecture:
  parser: 'segmentation_parser'
  multilevel_features: 'identity'
  backbone: 'tunable_spinenet'
  use_bfloat16: true
  # Note that `num_classes` is the total number of classes including
  # one background class with an index value of 0.
  num_classes: 21
  use_aspp: false
  use_pyramid_fusion: true
  # NOTE: If you change the 'min_level' and 'max_level'
  # search-space related parameters here, then you also need
  # to change them in the 'search_spaces.py' file.
  min_level: 3
  max_level: 7

segmentation_parser:
  aug_rand_hflip: true
  aug_scale_max: 1.5
  aug_scale_min: 0.75
  ignore_label: 255
  output_size: [512, 512]
  resize_eval: True
segmentation_head:
  # Its value need to be the same as `architecture.min_level`.
  level: 3
  num_convs: 2

tunable_spinenet:
  # The multiplier of the number of filters for each block.
  filter_size_scale: 0.25
  # the scaling factor to scale feature dimension before resolution resampling.
  resample_alpha: 0.25
  # The number of filters of the output endpoints.
  endpoints_num_filters: 64

batch_norm_activation:
  batch_norm_epsilon: 0.001
  batch_norm_momentum: 0.997
  batch_norm_trainable: true
  use_sync_bn: true

segmentation_loss:
  ignore_label: 255
  use_groundtruth_dimension: false
  label_smoothing: 0.05
